package dagger.internal.codegen;
/* loaded from: classes.dex */
public final class AdapterJavadocs {
    static final String ATTACH_METHOD = "Used internally to link bindings/providers together at run time\naccording to their dependency graph.";
    static final String GENERATED_BY_DAGGER = "Code generated by dagger-compiler.  Do not edit.";
    static final String GET_DEPENDENCIES_METHOD = "Used internally obtain dependency information, such as for cyclical\ngraph detection.";
    static final String GET_METHOD = "Returns the fully provisioned instance satisfying the contract for\n{@code Provider<%s>}.";
    static final String MEMBERS_INJECT_METHOD = "Injects any {@code @Inject} annotated fields in the given instance,\nsatisfying the contract for {@code Provider<%s>}.";
    static final String MODULE_TYPE = "A manager of modules and provides adapters allowing for proper linking and\ninstance provision of types served by {@code @Provides} methods.";
    static final String STATIC_INJECTION_TYPE = "A manager for {@code %s}'s injections into static fields.";
    static final String STATIC_INJECT_METHOD = "Performs the injections of dependencies into static fields when requested by\nthe {@code dagger.ObjectGraph}.";

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String bindingTypeDocs(String type, boolean abstrakt, boolean members, boolean dependent) {
        StringBuffer sb = new StringBuffer();
        sb.append("A {@code Binding<").append(type).append(">} implementation which satisfies\n");
        sb.append("Dagger's infrastructure requirements including:");
        if (dependent) {
            sb.append("\n\n");
            sb.append("Owning the dependency links between {@code " + type + "} and its\n");
            sb.append("dependencies.");
        }
        if (!abstrakt) {
            sb.append("\n\n");
            sb.append("Being a {@code Provider<" + type + ">} and handling creation and\n");
            sb.append("preparation of object instances.");
        }
        if (members) {
            sb.append("\n\n");
            sb.append("Being a {@code MembersInjector<" + type + ">} and handling injection\n");
            sb.append("of annotated fields.");
        }
        return sb.toString();
    }
}
